---
AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  KeyPairName:
    Default: "archive-key-pair"
    Type: String
  Image:
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
  InstanceType:
    Default: m6g.4xlarge
    Type: String
  ScriptStorageBucket:
    Default: kylelaker-data
    Type: String
  ParkingDataBucket:
    Default: jmu-parking-data
    Type: String
  ParkingArchiveBucket:
    Default: jmu-parking-archives
    Type: String

Resources:
  ManagedPolicyS3:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:HeadObject
              - s3:GetObject
              - s3:GetObjectAcl
              - s3:GetObjectTagging
              - s3:GetBucket
              - s3:ListBucket
              - s3:DeleteObject
              - s3:DeleteObjectTagging
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${ParkingDataBucket}
              - !Sub arn:${AWS::Partition}:s3:::${ParkingDataBucket}/*
          - Effect: Allow
            Action:
              - s3:HeadObject
              - s3:GetObject
              - s3:GetObjectAcl
              - s3:GetObjectTagging
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:PutObjectTagging
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${ParkingArchiveBucket}
              - !Sub arn:${AWS::Partition}:s3:::${ParkingArchiveBucket}/*

  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref ManagedPolicyS3
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
        - !Sub arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Role

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH access to instance
      SecurityGroupIngress:
        - Description: Allow SSH IPv4
          CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
        - Description: Allow SSH IPv6
          CidrIpv6: "::/0"
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp

  Instance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref Image
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !GetAtt SecurityGroup.GroupId
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp3
            VolumeSize: 25
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          # Update and install required packages
          yum update -y
          yum install -y python3 python3-pip python3-setuptools

          # Configure a working area in memory
          export WORKDIR_ROOT=/work
          mkdir "$WORKDIR_ROOT"
          mount -o mode=1777,nosuid,nodev -t tmpfs tmpfs "$WORKDIR_ROOT"

          # Perform all operations in the hope directory
          cd ~
          aws s3 cp s3://${ScriptStorageBucket}/archive-annual.py .
          python3 -m venv .env
          source .env/bin/activate
          pip install -U pip
          pip install boto3 click

          # Create a file with necessary environment variables for the script
          echo "export WORKDIR_ROOT=\"$WORKDIR_ROOT\"" >> "env.sh"
          echo "source .env/bin/activate" >> "env.sh"
